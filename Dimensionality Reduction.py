# -*- coding: utf-8 -*-
"""Assignment9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11PByxPz6NSUZMejdlR4pPyigZ9JtHjue
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

"""Load datset"""

iris=sns.load_dataset(name='iris')

def mean(x, n):
  m=np.sum(x)/n
  return(m)

def variance(x, m, n):
  v=0
  for i in range (n):
    v+=(x[i]-m)**2
  v=v/n
  return(v)


def standard(df, n, m):
  for i in range (n):
    expx=mean(df[:, i], m)
    ans=variance(df[:, i], expx, m)

    for j in range (m):
      df[j, i]=(df[j, i]-expx)/ans**0.5

  return(df)

def covariance(x, y, n):
  expx=mean(x, n)
  expy=mean(y, n)

  covariance=0
  for i in range (n):
     covariance+=(x[i]-expx)*(y[i]-expy)
  covariance=covariance/(n-1)

  return(covariance)

"""Q1]"""

df=iris.iloc[:, :4].to_numpy()
rows=df.shape[0]
col=df.shape[1]
covariance_matrix=np.zeros((col,col))
df=standard(df, col, rows)


for i in range (n):
  for j in range (n):
    covariance_matrix[i][j]=covariance(df[:, i], df[:, j], rows)


print('Covariance Matrix:', end='\n\n')
print('\t\t', 'sepal_length \t\t', 'sepal_width \t\t', 'petal_length \t\t', 'petal_width \t\t', end='\n\n')
for i in range (col):
  for j in range (col):
    if(j==0):
      if(i==0):
        print('sepal length', end='\t')
      elif(i==1):
        print('sepal width', end='\t')
      elif(i==2):
        print('petal length', end='\t')
      elif(i==3):
        print('petal width', end='\t')
    print(covariance_matrix[i][j], end='\t')
  print(end='\n\n')

"""Q2]"""

eigenvalue, eigenvector=np.linalg.eig(covariance_matrix)
eigenvalue=[(eigenvalue[i], i) for i in range(eigenvalue.size)]
eigenvalue.sort(reverse=True)
eigenvector=np.array([eigenvector[:, i] for _, i in eigenvalue]).T


for i in range (eigenvector.shape[1]):
  print(f"Principle Component {i+1}:", end='\t[ ')
  for j in range (eigenvector.shape[0]):
    if(j!=eigenvector.shape[0]-1):
      print(eigenvector[j][i], end='\t')
    else:
      print(eigenvector[j][i], end=' ')
  print(']')

"""Q3]"""

dftranspose= np.dot(df, eigenvector)


print('Transformed 2D Data:', end='\n\n')
print('\tPC1\t\t', '\tPC2', end='\n\n')
for i in range(len(dftranspose)):
    for j in range(2):
        print(dftranspose[i][j], end='\t')
    print()

print()
print('Transformed 3D Data:', end='\n\n')
print('\tPC1\t\t', '\tPC2\t\t', '\tPC3', end='\n\n')
for i in range(len(dftranspose)):
    for j in range(3):
        print(dftranspose[i][j], end='\t')
    print()

"""Q4]"""

for species in iris['species'].unique():
    plt.scatter(dftranspose[iris['species']==species, 0], dftranspose[iris['species']==species, 1], label=species)
plt.title('2D Visualization of Reduced Dimension Data')
plt.xlabel('PC1')
plt.ylabel('PC2')
plt.legend()
plt.grid()
plt.show()


print()


fig = plt.figure(figsize=(7,4))
ax = fig.add_subplot(111, projection='3d')
for species in iris['species'].unique():
    ax.scatter(dftranspose[iris['species']==species, 0], dftranspose[iris['species']==species, 1], dftranspose[iris['species']==species, 2], label=species)
ax.set_title('3D Visualization of Reduced Dimension Data')
ax.set_xlabel('PC1')
ax.set_ylabel('PC2')
ax.set_zlabel('PC3')
plt.tight_layout()
ax.legend()
plt.show()

